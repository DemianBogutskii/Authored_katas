#https://www.codewars.com/kata/603e87272abd430010752c5b

#Solution

def biggest(arr):
    m = max([sum(el) for el in arr])
    a = [i+1 for i, el in enumerate(arr) if sum(el) == m]
    return a if len(a) > 1 else a[0]
    
    
    
#Description

We need your help to find which team got the most points during the Olympic Games. The list contains the points received by each team during the Olympic. Return the winning team's position, the numeration starts from 1. If several teams received the same amount of points, return a list of the teams position, in the same order as it was in the list.

Also, all input numbers will be integers.

Example
biggest([(1, 5), (3, 9), (7, 2)]) == 2
biggest([(9), (1, 4, 2)]) == 1
biggest([(1, 6, 8, 2), (1, 2), (7, 10), (10, 7)]) == [1, 3, 4]


#Test cases

import codewars_test as test

@test.describe("Sample Tests")
def fixed_tests():
    @test.it('Basic Test Cases')
    def basic_test_cases():
        test.assert_equals(biggest([(10, 5), (1, 4), (8, 6)]), 1)
        test.assert_equals(biggest([(5, 8), (15, 1), (8, 6), (9, 5)]), 2)
        test.assert_equals(biggest([(5, 6), (16, 2), (3, 9), (1, 4)]), 2)
        test.assert_equals(biggest([(7, 10)]), 1)
        test.assert_equals(biggest([(1, 6, 8, 2), (7, 10), (10, 7)]), [1, 2, 3])
        

from random import randint

@test.describe("Random Tests")
def random_tests():

    def _biggest(arr):
        m = max([sum(el) for el in arr])
        a = [i+1 for i, el in enumerate(arr) if sum(el) == m]
        return a if len(a) > 1 else a[0]

    def generate_random():
        l = randint(1, 10) #how much tuples will be made.
        arr = []
        for i in range(l):
            tup = []
            tup_len = randint(2, 6)
            for j in range(tup_len):
                tup.append(randint(1, 30))
            arr.append(tuple(tup))
        return arr

    def do_one_test():
        arr = generate_random()
        expected = _biggest(arr)
        actual = biggest(arr)
        test.assert_equals(actual, expected, f"Wrong result for {arr}. Expected {expected}, received {actual}.")
    
    @test.it('Random Test Cases')
    def random_test_cases():
        for i in range(100):
            do_one_test()
